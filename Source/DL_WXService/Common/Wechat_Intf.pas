unit Wechat_Intf;

// ----------------------------------------------------------------------
//  This file was automatically generated by RemObjects SDK from a
//  RODL file downloaded from a server or associated with this project.
// 
//  Do not modify this file manually, or your changes will be lost when
//  it is regenerated the next time you update your RODL.
// ----------------------------------------------------------------------

{$I RemObjects.inc}

interface

uses
  {$IFDEF DELPHIXE2UP}System.SysUtils{$ELSE}SysUtils{$ENDIF},
  {$IFDEF DELPHIXE2UP}System.Classes{$ELSE}Classes{$ENDIF},
  {$IFDEF DELPHIXE2UP}System.TypInfo{$ELSE}TypInfo{$ENDIF},
  uROUri,
  uROProxy,
  uROExceptions,
  uROXMLIntf,
  uROClasses,
  uROTypes,
  uROClientIntf,
  uROAsync,
  uROEventReceiver;

const LibraryUID = '{241CD82B-546D-48B4-8712-1BCE06F2795C}';
const TargetNamespace = 'Wechat';
const IReviceWSImplService_IID: TGUID = '{CE7C1117-F618-42B7-B60D-9ED791C626D7}';
const ReviceWSImplService_EndPointURI = 'http://221.213.63.40/wxplatform/ws/revicews';
type
  { Forward declarations }
  IReviceWSImplService = interface;
  IReviceWSImplService_Async = interface;
  IReviceWSImplService_AsyncEx = interface;
  CoReviceWSImplService = class;
  CoReviceWSImplService_Async = class;
  CoReviceWSImplService_AsyncEx = class;
  TReviceWSImplService_Proxy = class;
  TReviceWSImplService_AsyncProxy = class;
  TReviceWSImplService_AsyncProxyEx = class;

  IReviceWSImplService = interface(IROService)
  ['{ce7c1117-f618-42b7-b60d-9ed791c626d7}']
    function mainfuncs(const arg0: UnicodeString; const arg1: UnicodeString): UnicodeString;
  end;

  IReviceWSImplService_Async = interface(IROAsyncInterface)
  ['{9b5983c5-d5de-4bc1-a0de-f78a529e218c}']
    procedure Invoke_mainfuncs(const arg0: UnicodeString; const arg1: UnicodeString);
    function Retrieve_mainfuncs: UnicodeString;
  end;

  IReviceWSImplService_AsyncEx = interface(IROAsyncInterfaceEx)
  ['{a6ae43b5-2ae2-4131-a2d2-3501cc7c4855}']
    function Beginmainfuncs(const arg0: UnicodeString; const arg1: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function Endmainfuncs(const aRequest: IROAsyncRequest): UnicodeString;
  end;

  CoReviceWSImplService = class(System.TObject)
  public
    class function Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): IReviceWSImplService; overload;
    class function Create(const aUri: TROUri): IReviceWSImplService; overload;
    class function Create(const aUrl: String): IReviceWSImplService; overload;
  end;

  CoReviceWSImplService_Async = class(System.TObject)
  public
    class function Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): IReviceWSImplService_Async; overload;
    class function Create(const aUri: TROUri): IReviceWSImplService_Async; overload;
    class function Create(const aUrl: String): IReviceWSImplService_Async; overload;
  end;

  CoReviceWSImplService_AsyncEx = class(System.TObject)
  public
    class function Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): IReviceWSImplService_AsyncEx; overload;
    class function Create(const aUri: TROUri): IReviceWSImplService_AsyncEx; overload;
    class function Create(const aUrl: String): IReviceWSImplService_AsyncEx; overload;
  end;

  TReviceWSImplService_Proxy = class(TROProxy, IReviceWSImplService)
  protected
    function __GetInterfaceName: String; override; 
    function mainfuncs(const arg0: UnicodeString; const arg1: UnicodeString): UnicodeString;
  end;

  TReviceWSImplService_AsyncProxy = class(TROAsyncProxy, IReviceWSImplService_Async)
  protected
    function __GetInterfaceName: String; override; 
    procedure Invoke_mainfuncs(const arg0: UnicodeString; const arg1: UnicodeString);
    function Retrieve_mainfuncs: UnicodeString;
  end;

  TReviceWSImplService_AsyncProxyEx = class(TROAsyncProxyEx, IReviceWSImplService_AsyncEx)
  protected
    function __GetInterfaceName: String; override; 
    function Beginmainfuncs(const arg0: UnicodeString; const arg1: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function Endmainfuncs(const aRequest: IROAsyncRequest): UnicodeString;
  end;

implementation

uses
  uROSerializer,
  uROClient,
  uROTransportChannel,
  uRORes;

type
  { Forward declarations }
  TMyTransportChannel = class;

  TMyTransportChannel = class(TROTransportChannel)
  end;

class function CoReviceWSImplService.Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): IReviceWSImplService;
begin
  result := TReviceWSImplService_Proxy.Create(aMessage, aTransportChannel);
  exit;
end;

class function CoReviceWSImplService.Create(const aUri: TROUri): IReviceWSImplService;
begin
  result := TReviceWSImplService_Proxy.Create(aUri);
  exit;
end;

class function CoReviceWSImplService.Create(const aUrl: String): IReviceWSImplService;
begin
  result := TReviceWSImplService_Proxy.Create(aUrl);
  exit;
end;

class function CoReviceWSImplService_Async.Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): IReviceWSImplService_Async;
begin
  result := TReviceWSImplService_AsyncProxy.Create(aMessage, aTransportChannel);
  exit;
end;

class function CoReviceWSImplService_Async.Create(const aUri: TROUri): IReviceWSImplService_Async;
begin
  result := TReviceWSImplService_AsyncProxy.Create(aUri);
  exit;
end;

class function CoReviceWSImplService_Async.Create(const aUrl: String): IReviceWSImplService_Async;
begin
  result := TReviceWSImplService_AsyncProxy.Create(aUrl);
  exit;
end;

class function CoReviceWSImplService_AsyncEx.Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): IReviceWSImplService_AsyncEx;
begin
  result := TReviceWSImplService_AsyncProxyEx.Create(aMessage, aTransportChannel);
  exit;
end;

class function CoReviceWSImplService_AsyncEx.Create(const aUri: TROUri): IReviceWSImplService_AsyncEx;
begin
  result := TReviceWSImplService_AsyncProxyEx.Create(aUri);
  exit;
end;

class function CoReviceWSImplService_AsyncEx.Create(const aUrl: String): IReviceWSImplService_AsyncEx;
begin
  result := TReviceWSImplService_AsyncProxyEx.Create(aUrl);
  exit;
end;

function TReviceWSImplService_Proxy.__GetInterfaceName: String;
begin
  result := 'ReviceWSImplService';
  exit;
end;

function TReviceWSImplService_Proxy.mainfuncs(const arg0: UnicodeString; const arg1: UnicodeString): UnicodeString;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: UnicodeString;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  lMessage.SetAttributes(lTransportChannel, ['inputchildrennamespace', 'location', 'outputchildrennamespace', 'soapactionisempty', 'soapinputmessagenamespace', 'soapinputnameoverride', 'soapoutputmessagenamespace', 
                                             'style', 'type', 'use'], ['*', 'http://221.213.63.40/wxplatform/ws/revicews', '*', '1', 'http://ws.webservice.zhixin.com/', 'mainfuncs', 'http://ws.webservice.zhixin.com/', 
                                             'document', 'SOAP', 'literal']);
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'Wechat', __InterfaceName, 'mainfuncs');
    lMessage.Write('arg0', System.TypeInfo(UnicodeString), arg0, []);
    lMessage.Write('arg1', System.TypeInfo(UnicodeString), arg1, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('return', System.TypeInfo(UnicodeString), lResult, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReviceWSImplService_AsyncProxy.__GetInterfaceName: String;
begin
  result := 'ReviceWSImplService';
  exit;
end;

procedure TReviceWSImplService_AsyncProxy.Invoke_mainfuncs(const arg0: UnicodeString; const arg1: UnicodeString);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('mainfuncs');

    lMessage.SetAttributes(lTransportChannel, ['inputchildrennamespace', 'location', 'outputchildrennamespace', 'soapactionisempty', 'soapinputmessagenamespace', 'soapinputnameoverride', 'soapoutputmessagenamespace', 
                                               'style', 'type', 'use'], ['*', 'http://221.213.63.40/wxplatform/ws/revicews', '*', '1', 'http://ws.webservice.zhixin.com/', 'mainfuncs', 'http://ws.webservice.zhixin.com/', 
                                               'document', 'SOAP', 'literal']);
    lMessage.InitializeRequestMessage(lTransportChannel, 'Wechat', __InterfaceName, 'mainfuncs');
    lMessage.Write('arg0', System.TypeInfo(UnicodeString), arg0, []);
    lMessage.Write('arg1', System.TypeInfo(UnicodeString), arg1, []);
    __DispatchAsyncRequest('mainfuncs', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TReviceWSImplService_AsyncProxy.Retrieve_mainfuncs: UnicodeString;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: UnicodeString;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    __response := __RetrieveAsyncResponse('mainfuncs');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('return', System.TypeInfo(UnicodeString), lResult, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        __response.Free;
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReviceWSImplService_AsyncProxyEx.__GetInterfaceName: String;
begin
  result := 'ReviceWSImplService';
  exit;
end;

function TReviceWSImplService_AsyncProxyEx.Beginmainfuncs(const arg0: UnicodeString; const arg1: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  try
    lMessage.StoreAttributes2(['inputchildrennamespace', 'location', 'outputchildrennamespace', 'soapactionisempty', 'soapinputmessagenamespace', 'soapinputnameoverride', 'soapoutputmessagenamespace', 
                               'style', 'type', 'use'], ['*', 'http://221.213.63.40/wxplatform/ws/revicews', '*', '1', 'http://ws.webservice.zhixin.com/', 'mainfuncs', 'http://ws.webservice.zhixin.com/', 
                               'document', 'SOAP', 'literal']);
    lMessage.ApplyAttributes2();
    lMessage.InitializeRequestMessage(lTransportChannel, 'Wechat', __InterfaceName, 'mainfuncs');
    lMessage.Write('arg0', System.TypeInfo(UnicodeString), arg0, []);
    lMessage.Write('arg1', System.TypeInfo(UnicodeString), arg1, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TReviceWSImplService_AsyncProxyEx.Endmainfuncs(const aRequest: IROAsyncRequest): UnicodeString;
var
  lResult: UnicodeString;
begin
  aRequest.ReadResponse();
  aRequest.Message.Read('return', System.TypeInfo(UnicodeString), lResult, []);
  result := lResult;
  exit;
end;

initialization
  RegisterProxyClass(IReviceWSImplService_IID, TReviceWSImplService_Proxy);
finalization
  UnregisterProxyClass(IReviceWSImplService_IID);
end.
